1- Create and enviroment with python

$ python3 -m venv ~/env

$ source ~/env/bin//activate

# to deactivate
$ deactivate


2- create a file called requirements.txt
to install all dependencies of your project

after install from the file, make sure youre on
your python enviroment and continue in this enviroment
till new advise
 
 $ pip3 install -r requirements.txt


3- Create a DJango app

 stil in the python enviroment run the follow
 command to automatically create a project folder
 the name for this is "profiles_project" and will be
 at the root folder "."

 $ django-admin.py startproject profiles_project .

now we need create at app into our project for our
provides API so profiles_project can consist of
one or more sub applications, 

$  python3 manage.py startapp profiles_api

it create a new sud folder also in the root


4- now enable the api_app with the django project

to do that got to the profiles_project->settings.py
this file contains the setting for out django app
in this file  look for an array called INSTALLED_APPS = []
and set in a new line the api app

    add the follow apps to the  array 
    'rest_framework',
    'rest_framework.authtoken',
    'profiles_api',


    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',
        'rest_framework.authtoken',
        'profiles_api',
    ]



5- test the changes we did using django development server

    $ python3 manage.py runserver 0.0.0.0:8000


6- Create user database models
see file models.py and look for  models of UserProfile class


7- add user model manager
see file models.py and look for  models of UserProfileManager class

8- set our custom user model
configure our django project to use this model as default
user model instead of the ones provided for django

set the user model on settings.py at the bottom of the filecreate a new setting

    arguments = name fo the app, name of the model
    AUTH_USER_MODEL= 'profiles_api.UserProfile'

9- create migrations fileand sync DB

every time you change or add a model you need to create a
new migration file

    $ source ~/env/bin/activate
    $ python manage.py makemigrations profiles_api

    it will create a new migration file on migrations/

now run all the migrations of our project
    $ python manage.py migrate


10- creating super user to use Django admin
Django admin allows manage your database models

making easy inspect the DB see models and modify them

we need to create a super user
user with the maximun privileges in our DB 

do it useng DJango cli:

    $ source ~/env/bin/activate
    $ python manage.py createsuperuser

    it will ask for email, name and password set your data
    
11- enabled django admin for our user profile
go on profiles_api->admin.py

impoer the models form this folder
    from profiles_api import models

then register the module
    admin.site.register(models.userProfile)

this tells Django admin to register oir user profile
model with the admin site, sot it makes accesible throught
the admin interface

for last thes the admin runing the server

    $ python manage.py runserver

    127.0.0.0.1:8000/admin and try to access


12- Create API View

go to views.py file and here do the changes
remove all what is in the file

    from rest_framework.views import APIView
    from rest_framework.response import Response


    class HelloApiView(APIView):
        """Test API View"""

        def get(self, request, format=None):
            """Returns a list of APIView features"""
            an_apiview = [
                'Uses HTTP methods as function (get, post patch, put, delete)',
                'Is similar to a traditional Django view',
                'Gives you the most control over you application logic',
                'Is mapped manually to URLS'
            ]

            return Response({'message': 'Hello!', 'an_apiview': an_apiview})

13- Configure the view URL
move to the profuiles_api folder who contains our api
and create a new file urls.py

    from django.urls import path
    from profiles_api import views

    urlpatterns = [
        path('hello-view/', views.HelloApiView.as_view()),
    ]

now in the pricipal urls.py file in our project django
use include function that let you include urls from
other apps

    from django.urls import path, include

    #name of the folder to look in include argument
    path('api/', include('profiles_api.urls))

finally test our new view on serve, run server and go 
to pat /api/hello-view, it must return and object with our response


14- Create a Serializer
is good pratices has all serializers for your app in the same file

create a new file in profiles_api->serializers.py

    from rest_framework import serializers

    class HelloSerializer(serializers.Serializer):
        """ Serializes fields for testing our APIView
        name = serializers.CharField(max_length=10)


15- Add method post to APIView
come basck to tue urls.py for the api 
and in import the serializers that just created

    from rest_framework import status
    from profiles_api import serializers

after our class view declaration setup this
call to the serializer class

    serializer_class = serializers.HelloSerialize 

now create a post function to handle this method
    def post(self, request):
        serializer = self.serializer_class(data=request.data)

        if serializer.is_valid():
            name = serializer.validate_data.get('name')
            message = f'Hello {name}'
            return Response({'message': message})
        else:
            return Response(
                serializer.errors,
                status=status.HTTP_400_BAD_REQUEST
            )
test the post method on the server


16- create a new viewSet in views.py  wich it to perform operations by the api

    from rest_framework import viewsets

declare a new class for the viewSet

    class HelloViewSet(viewsets.ViewSet):
        """Test api ViewSet"""

        def list(self, request):
            """Return a hello Message"""
            a_viewset = [
                'Uses actions (list, create, retrieve, update, partial_update, destroy)',
                'Automatically maps to URLs using  routers',
                'Provides more functionality with less code'

            ]

        return Response({"message": "Hello!", "a_viewset": a_viewset})

now  add URL ROuter from django rest rest_framework in urls.py of api

    from django.urls import path, include
    from rest_framework.routers import DefaultRouter

now create a routers
    router = DefaultRouter()
register a new route
    router.register('hello-viewset', views.HelloViewSet, base_name='hello-viewset')

now to use it with our api, must include as path in url patterns
    path('', include(router.urls))

now lets test the viewset on browser
/api/ and see the differences

    